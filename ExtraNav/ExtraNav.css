 /* ===== Design tokens ===== */
 :root {
     user-select: none;
     -webkit-user-drag: none;

     /* colors */
     --bg-0: #e9e9e9;
     --surface-0: #0d024cb8;
     /* header bg */
     --surface-1: #120b314f;
     /* hover bg */
     --border-0: #291871;
     --text-0: #e6ebf4;
     --text-1: #b7c0d4;
     --accent-0: #47d6c9;
     --accent-1: #291871;

     /* new: shared neutrals / utility */
     --ink-0: #141414;
     --ink-1: #fff;
     --field-bg: #151a22;
     --hover-ring: #303745;
     --submenu-bg: #bebebe;
     --submenu-sep: #42434a;
     --accent-2: #5353ff;

     /* primary hover */
     --accent-warn: #8e2a2a;
     --accent-ok: #2a8e5f;
     --notif: #FF2F02;

     /* spacing + radii */
     --r-0: 10px;
     --r-1: 12px;
     --r-2: 16px;
     --s-1: 6px;
     --s-2: 8px;
     --s-3: 12px;
     --s-4: 16px;
     --s-5: 20px;
     --icon: 24px;
     --btn-h: 40px;

     /* sizes */
     --menu-w: 220px;
     --xs-overlap: calc(var(--btn-h) - 5px);

     /* search */
     --search-size: 20px;
     --search-gap: clamp(10px, 1.2vw, 14px);
     --dot-size: 0px;
     --dot-gap: 15px;
     --settings-hit: 34px;

     /* shadows (fixed) */
     --elev-0: 0 0 0 1px var(--border-0);
     --elev-1: 0 1.6px 0 0 #E35F12, 0 0 0 1px var(--border-0);

     /* viewport edges for pinned bar */
     --edge-x: clamp(12px, 2vw, 24px);
     --edge-y: clamp(8px, 1.4vw, 16px);
     --bar-max: 100vw;

     /* motion */
     --t-fast: .12s;
     --t-med: .18s;
     --t-ui: .22s;
     --ease: ease;
     --ease-out: ease-out;
 }

 /* Dark theme overrides */
 :root[data-theme="dark"] {
     --bg-0: #0f1218;
     /* page background */
     --surface-0: #141828;
     /* header / surfaces */
     --surface-1: #1a2140;
     /* hover bg */
     --border-0: #2a3460;
     --text-0: #e6ebf4;
     /* primary text */
     --text-1: #b7c0d4;
     /* secondary text */
     --field-bg: #0f1420;
     /* inputs */
     --hover-ring: #2a3450;

     /* menus */
     --submenu-bg: #1b2133;
     --submenu-sep: #2c3244;

     /* accents (keep your palette, tweak if needed) */
     --accent-0: #47d6c9;
     --accent-1: #5353ff;
     --accent-2: #6c6cff;

     /* optional: help UAs style built-ins correctly */
     color-scheme: dark;
 }

 /* Example: show different clouds per theme */
 :root[data-theme="dark"] .cloud-light {
     opacity: 0;
 }

 :root[data-theme="dark"] .cloud-dark {
     opacity: 1;
 }

 :root[data-theme="light"] .cloud-light {
     opacity: 1;
 }

 :root[data-theme="light"] .cloud-dark {
     opacity: 0;
 }

 /* Optional: explicitly mark light too (helps with UA widgets) */
 :root[data-theme="light"] {
     color-scheme: light;
 }

 /* Dark mode: make submenu/menu text white for contrast */
 :root[data-theme="dark"] .submenu,
 :root[data-theme="dark"] .sublist,
 :root[data-theme="dark"] .submenu .list .element,
 :root[data-theme="dark"] .iconDiv [data-submenu],
 :root[data-theme="dark"] .group [data-submenu] {
     color: var(--ink-1);
     border-color: var(--border-0);
 }


 /* ===== Base ===== */
 * {
     box-sizing: border-box
 }

 html,
 body {
     height: 100%
 }

 body {
     margin: 0;
     background: var(--bg-0);
     color: var(--text-0);
     font: 14px/1.35 "Open Sans", system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, "Helvetica Neue", Arial, sans-serif;
     padding-top: calc(var(--edge-y) + 64px);
 }

 /* ===== Layout wrapper ===== */
 .container {
     min-height: 100svh;
     display: grid;
     place-items: center;
     background:
         radial-gradient(1200px 800px at 30% -20%, rgba(71, 214, 201, .08), transparent 60%),
         radial-gradient(900px 600px at 90% 120%, rgba(112, 184, 255, .06), transparent 60%),
         var(--bg-0);
     color: var(--text-0);
 }

 #wrapper {
     width: clamp(320px, 92vw, 1100px);
     padding: clamp(12px, 2vw, 24px);
 }

 /* ===== Menubar (source of truth) ===== */
 header.menu-top {
     display: flex;
     align-items: center;
     gap: clamp(6px, 1.2vw, 16px);
     padding: clamp(8px, 1.4vw, 16px) clamp(12px, 2vw, 24px);
     width: 100%;
     background: var(--surface-0);
     border-radius: var(--r-2);
     box-shadow: var(--elev-1);
     container-type: inline-size;
     /* enables cqw/cqh container queries */
 }

 .menu-top.pinned {
     position: fixed;
     top: max(var(--edge-y), env(safe-area-inset-top));
     left: max(var(--edge-x), env(safe-area-inset-left));
     right: max(var(--edge-x), env(safe-area-inset-right));
     width: auto;
     margin: 0;
     z-index: 1000;
 }

 /* Divider + spacer */
 .divider {
     width: 1px;
     align-self: stretch;
     background: linear-gradient(to bottom, transparent, var(--border-0), transparent);
     margin-inline: clamp(8px, 2cqw, 16px);
     transition: opacity var(--t-med) var(--ease), visibility var(--t-med) step-end;
 }

 .spacer {
     flex: 1
 }

 /* ===== Icon buttons ===== */
 .iconDiv {
     position: relative;
     display: inline-flex;
     align-items: center;
     gap: var(--s-2);
     height: var(--btn-h);
     padding-inline: clamp(6px, 1vw, 12px);
     border-radius: var(--r-0);
     white-space: nowrap;
     cursor: pointer;
     max-width: 42px;
     /* collapsed width (icon-only) */
     overflow: hidden;
     /* hides the label when collapsed */
     background: transparent;
     outline: none;
     transition:
         max-width var(--t-ui) var(--ease),
         background-color var(--t-fast) var(--ease),
         transform .06s var(--ease),
         opacity var(--t-med) var(--ease),
         margin var(--t-med) var(--ease);
     user-select: none;
     -webkit-user-drag: none;
     -webkit-touch-callout: none;
     touch-action: manipulation;
 }

 .iconDiv .iconSVG {
     width: var(--icon);
     height: var(--icon);
     display: grid;
     place-items: center;
     color: var(--text-0);
 }

 .iconDiv .iconSVG svg,
 .iconDiv .iconSVG svg * {
     pointer-events: none
 }

 .iconDiv .text {
     color: var(--text-1);
     opacity: 0;
     transform: translateX(-2px);
     transition: opacity .14s var(--ease) .06s, transform .14s var(--ease) .06s;
     user-select: none;
     max-width: 0;
     overflow: hidden;
     white-space: nowrap;
 }

 /* Expand on hover/focus to reveal label */
 .iconDiv:is(:hover, :focus-visible) {
     background: var(--surface-1);
     max-width: 180px;
 }

 .iconDiv:is(:hover, :focus-visible) .text {
     opacity: 1;
     transform: none;
     max-width: 140px;
 }

 .iconDiv:focus-visible {
     box-shadow: 0 0 0 2px var(--accent-1)
 }

 .iconDiv:active {
     transform: translateY(1px);
     opacity: .95
 }

 /* Allow dropdowns to overflow the trigger; keep label itself clipped */
 .iconDiv[data-hasmenu] {
     overflow: visible;
 }

 .iconDiv[data-hasmenu] .text {
     overflow: hidden;
 }

 /* Tooltip for unset hotbuttons */
 .iconDiv[data-tooltip]::after {
     content: attr(data-tooltip);
     position: absolute;
     bottom: calc(100% + 6px);
     left: 50%;
     transform: translateX(-50%);
     background: #222;
     color: #fff;
     font-size: 11px;
     padding: 4px 6px;
     border-radius: 6px;
     white-space: nowrap;
     opacity: 0;
     pointer-events: none;
     transition: opacity 0.15s ease;
     z-index: 999;
 }

 .iconDiv[data-tooltip]:hover::after,
 .iconDiv[data-tooltip]:focus::after {
     opacity: 1;
 }

 /* ===== Search ===== */
 .menu-top>.group {
     flex: 0 1 clamp(260px, 40cqw, 520px);
     transition: flex-basis var(--t-med) var(--ease), width var(--t-med) var(--ease);
 }

 .input {
     width: 100%;
     height: clamp(36px, 6cqh, 44px);
     border: 0;
     border-radius: var(--r-0);
     background: var(--field-bg);
     color: var(--text-0);
     padding-inline-start: 12px;
     padding-inline-end: calc(var(--search-size) + var(--search-gap) + 6px);
     box-shadow: var(--elev-0);
     transition: box-shadow .15s var(--ease), transform .06s var(--ease);
 }

 .input::placeholder {
     color: var(--text-1)
 }

 .input:hover {
     box-shadow: 0 0 0 2px var(--hover-ring)
 }

 .input:focus {
     box-shadow: 0 0 0 2px var(--accent-1)
 }

 .input:active {
     transform: scale(.995)
 }

 /* ===== Attribute-driven dropdowns (generic) ===== */

 .iconDiv:focus-within [data-submenu],
 .iconDiv[aria-expanded="true"] [data-submenu] {
     opacity: 1;
     visibility: visible;
     pointer-events: auto;
     transform: none;
     transition-timing-function: var(--ease-out);
 }

 .iconDiv [data-submenu][role="menu"] {
     padding: 6px;
 }

 .iconDiv [data-submenu] .item {
     display: flex;
     align-items: center;
     gap: 10px;
     padding: 6px 8px;
     border-radius: 6px;
     cursor: pointer;
     background: transparent;
     text-decoration: none;
     color: inherit;
 }

 .iconDiv [data-submenu] .item:is(:hover, :focus) {
     outline: none;
     background: var(--accent-2);
     color: var(--ink-1);
 }

 .iconDiv [data-submenu] .separator {
     height: 0;
     border-top: 4px solid var(--submenu-sep);
     margin-block: 4px;
 }

 .iconDiv [data-submenu] .item[data-variant="warn"]:hover {
     background-color: var(--accent-warn);
     color: var(--ink-1);
 }

 .iconDiv [data-submenu] .item[data-variant="ok"]:hover {
     background-color: var(--accent-ok);
     color: var(--ink-1);
 }

 @media (hover:none) {
     .iconDiv [data-submenu] {
         transition-duration: .16s;
     }
 }

 /* ===== Reusable submenu blocks ===== */
 .submenu,
 .sublist {
     background-color: var(--submenu-bg);
     border: 2px solid var(--ink-0);
     border-radius: var(--r-0);
     color: var(--ink-0);
 }

 .submenu {
     width: var(--menu-w);
     display: flex;
     flex-direction: column;
     gap: 10px;
     padding: 8px 0;
     font-family: "Inter", system-ui, -apple-system, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
 }

 .submenu .separator {
     border-top: 4px solid var(--submenu-sep);
     margin: 4px 0;
 }

 .submenu .list {
     list-style: none;
     display: flex;
     flex-direction: column;
     gap: 8px;
     padding: 0 10px;
     margin: 0;
     user-select: none;
 }

 .submenu .list .element {
     position: relative;
     display: flex;
     align-items: center;
     gap: 10px;
     padding: 6px 8px;
     border-radius: 6px;
     cursor: pointer;
     color: var(--ink-0);
     transition: transform .2s var(--ease-out), background-color .2s var(--ease-out), color .2s var(--ease-out);
 }

 .submenu .list .element .label {
     font-weight: 600;
 }

 .submenu .list .element:hover {
     background-color: var(--accent-2);
     transform: translate(1px, -1px);
 }

 .submenu .list .delete:hover {
     background-color: var(--accent-warn);
     color: var(--ink-1);
 }

 .submenu .list .special:hover {
     background-color: var(--accent-ok);
     color: var(--ink-1);
 }

 /* nested flyout */
 .sublist {
     position: absolute;
     top: -6px;
     left: calc(100% + 8px);
     width: var(--menu-w);
     padding: 8px;
     margin: 0;
     list-style: none;
     display: flex;
     flex-direction: column;
     gap: 8px;
     opacity: 0;
     pointer-events: none;
     transform: translateX(4px);
     transition: opacity var(--t-fast) var(--ease), transform var(--t-fast) var(--ease);
     z-index: 10;
 }

 .has-submenu.open>.sublist {
     opacity: 1;
     pointer-events: auto;
     transform: none;
 }

 .sublist .subelement {
     display: flex;
     align-items: center;
     gap: 10px;
     padding: 6px 12px;
     border-radius: 6px;
 }

 .sublist .subelement:hover {
     background-color: #ba53ff;
     color: var(--ink-1);
 }

 .has-submenu::after {
     content: "›";
     margin-left: auto;
     opacity: .7;
 }

 .submenu .list .element svg,
 .sublist .subelement svg {
     width: 24px;
     height: 24px;
     display: block;
     flex: none;
     color: inherit;
 }

 .menu-top .iconDiv>.iconSVG svg *[stroke],
 .submenu .list .element svg *[stroke],
 .sublist .subelement svg *[stroke] {
     stroke: currentColor !important;
 }

 .menu-top .iconDiv>.iconSVG svg *[fill]:not([fill="none"]),
 .submenu .list .element svg *[fill]:not([fill="none"]),
 .sublist .subelement svg *[fill]:not([fill="none"]) {
     fill: currentColor !important;
 }

 /* NEW: also catch color set on the <svg> node itself */
 .menu-top .iconDiv>.iconSVG svg[stroke],
 .submenu .list .element svg[stroke],
 .sublist .subelement svg[stroke] {
     stroke: currentColor !important;
 }

 .menu-top .iconDiv>.iconSVG svg[fill]:not([fill="none"]),
 .submenu .list .element svg[fill]:not([fill="none"]),
 .sublist .subelement svg[fill]:not([fill="none"]) {
     fill: currentColor !important;
 }

 .submenu .list .element:hover>.label,
 .submenu .list .element:hover>svg,
 .sublist .subelement:hover>.label,
 .sublist .subelement:hover>svg {
     color: var(--ink-1);
 }

 .submenu .list .element svg[data-static-color] *,
 .sublist .subelement svg[data-static-color] * {
     fill: unset !important;
     stroke: unset !important;
 }

 /* ===== Container-query breakpoints (based on bar width) ===== */
 .menu-top>.iconDiv {
     transition: opacity var(--t-med) var(--ease), max-width var(--t-med) var(--ease), margin var(--t-med) var(--ease);
 }

 .xs-circle {
     display: inline-flex;
     align-items: center;
     justify-content: center;
     width: var(--btn-h);
     height: var(--btn-h);
     border-radius: 9999px;
     border: 0;
     padding: 0;
     background: var(--surface-1);
     color: none;
     box-shadow: none;
     /* invisible & non-interactive by default */
     opacity: 0;
     visibility: hidden;
     pointer-events: none;
     transform: scale(.85);
     flex: 0 0 0;
     max-width: 0;
     margin: 0;
     transition: opacity var(--t-med) var(--ease), transform var(--t-med) var(--ease), max-width var(--t-med) var(--ease), visibility var(--t-med) step-end;
 }

 .xs-circle:active {
     transform: scale(.76);
 }

 /* keep zero to avoid gaps from collapsed icons */
 .xs-circle {
     opacity: 1;
     visibility: visible;
     pointer-events: auto;
     transform: none;
     flex: 0 0 var(--btn-h);
     max-width: var(--btn-h);
     margin-inline-end: var(--s-2);
     order: -1;

 }

 /* M — tighten: search grows; labels stay collapsed */
 @container (max-width:600px) {
     .menu-top>.group {
         flex: 1 1 auto;
     }

     .menu-top>.divider {
         opacity: 0;
         visibility: hidden;
     }

     .menu-top>.iconDiv {
         max-width: 42px;
     }

     .menu-top>.iconDiv:is(:hover, :focus-visible) {
         max-width: 42px;
     }

     .menu-top>.iconDiv:is(:hover, :focus-visible) .text {
         opacity: 0;
         transform: translateX(-2px);
         max-width: 0;
     }
 }

 /* hot buttons share .iconDiv styling, but hide on small */
 @container (max-width:900px) {
     .menu-top>.hotbutton {
         opacity: 0;
         visibility: hidden;
         pointer-events: none;
         margin: 0;
         padding: 0;
         max-width: 0;
         flex: 0 0 0;
         /* fully collapse the flex item */
         transition:
             opacity var(--t-med) var(--ease),
             max-width var(--t-med) var(--ease),
             margin var(--t-med) var(--ease),
             padding var(--t-med) var(--ease),
             flex-basis var(--t-med) var(--ease),
             visibility var(--t-med) step-end;
     }
 }

 /* Optional: if you want to force an icon-only collapsed width at M+ */
 @container (min-width:600px) {
     .menu-top>.hotbutton {
         max-width: 42px;
     }

     .menu-top>.hotbutton:is(:hover, :focus-visible) {
         max-width: 180px;
     }
 }


 /* S — hide specific icons for space */
 @container (min-width:300px) and (max-width:600px) {

     .menu-top>.iconDiv[data-key="inbox"],
     .menu-top>.iconDiv[data-key="accounts"] {
         opacity: 0;
         visibility: hidden;
         pointer-events: none;
         margin: 0;
         padding: 0;
         max-width: 0;
         transition: opacity var(--t-med) var(--ease), max-width var(--t-med) var(--ease), margin var(--t-med) var(--ease), padding var(--t-med) var(--ease), visibility var(--t-med) step-end;
     }
 }

 /* XS — search only (animate out instead of display:none) */
 @container (max-width:400px) {

     /* remove leftover gaps between zero-width items */
     .menu-top {
         gap: 0;
     }

     .menu-top>.divider {
         opacity: 0;
         visibility: hidden;
         margin: 0;
     }

     .menu-top>.iconDiv {
         /* collapse + fade */
         opacity: 0;
         visibility: hidden;
         pointer-events: none;
         margin: 0;
         padding: 0;
         max-width: 0;
         flex: 0 0 0;
         /* fully collapse flex item */
         transition: opacity var(--t-med) var(--ease), max-width var(--t-med) var(--ease), margin var(--t-med) var(--ease), padding var(--t-med) var(--ease), flex-basis var(--t-med) var(--ease), visibility var(--t-med) step-end;
     }

     .menu-top .group {
         flex: 1 1 100%;
         min-width: 0;
     }

     .menu-top .input {
         margin-inline-start: calc(-1 * var(--xs-overlap));
         width: calc(100% + var(--xs-overlap));
         /* brings the right edge back to the group's edge */
     }
 }

 /* ===== Reduce motion ===== */
 @media (prefers-reduced-motion:reduce) {

     .iconDiv,
     .iconDiv .text,
     .input {
         transition: none
     }
 }


 /* XS — show the circle and use it as a left buffer next to search */
 @container (max-width:400px) {
     .menu-top {
         gap: 0;
     }
 }

 .xs-circle .xs-icon {
     width: 40px;
     height: 40px;
     display: block;
     /* removes inline-gap */
 }

 /* Inbox notification badge */
 .iconDiv[data-key="inbox"] {
     position: relative;
 }

 /* already set, but safe */
 .iconDiv[data-key="inbox"] .badge {
     position: absolute;
     top: 0;
     inset-inline-end: 0;
     transform: translate(35%, -35%);
     min-width: 16px;
     height: 16px;
     padding: 0 4px;
     border-radius: 999px;
     font-size: 10px;
     line-height: 16px;
     text-align: center;
     background: var(--notif);
     color: var(--ink-1);
     box-shadow: 0 0 0 2px var(--surface-0);
     /* ring against bar */
 }

 .iconDiv[data-key="inbox"] .badge[hidden] {
     display: none;
 }

 /* let the dropdown overflow the input wrapper */
 .group {
     position: relative;
     overflow: visible;
 }

 /* clickable icon */
 .search-trigger {
     position: absolute;
     top: 0;
     right: 0;
     height: 100%;
     width: calc(var(--search-size) + var(--search-gap) + 6px);
     display: flex;
     align-items: center;
     justify-content: center;
     background: transparent;
     border: 0;
     padding: 0;
     color: var(--text-0);
     cursor: pointer;
     transform: none;
     /* was translateY(-50%) */
 }


 .search-trigger .search-icon {
     width: var(--search-size);
     height: var(--search-size);
     pointer-events: none;
 }

 /* make search dropdown behave like the others AND float above */
 .iconDiv [data-submenu],
 .group [data-submenu] {
     position: absolute;
     /* <- this is what stops the header from stretching */
     top: calc(100% + 8px);
     left: 0;
     min-width: var(--menu-w);
     padding: 8px;
     margin: 0;
     list-style: none;
     background: var(--submenu-bg);
     border: 2px solid var(--ink-0);
     border-radius: var(--r-0);
     display: flex;
     flex-direction: column;
     gap: 8px;
     opacity: 0;
     visibility: hidden;
     pointer-events: none;
     transform: translateY(4px);
     transition: opacity var(--t-fast) var(--ease),
         transform var(--t-fast) var(--ease),
         visibility var(--t-fast) step-end;
     z-index: 1000;
     color: var(--ink-0);
 }

 /* align the search menu to the right edge of the field */
 .group .submenu[data-submenu] {
     left: auto;
     right: 0;
 }

 /* show only when button is toggled */
 .search-trigger[aria-expanded="true"]+.submenu {
     opacity: 1;
     visibility: visible;
     pointer-events: auto;
     transform: none;
     transition-timing-function: var(--ease-out);
 }

 /* radios styled like other items */
 .submenu .list .element label {
     display: flex;
     align-items: center;
     gap: 10px;
     /* spacing between control and text */
     cursor: pointer;
 }

 /* Custom radio — token-friendly + accessible */
 .submenu .list .element input[type="radio"] {
     appearance: none;
     inline-size: 1.5em;
     block-size: 1.5em;
     border-radius: 50%;
     background: var(--submenu-bg);
     /* was var(--elev-1) (not a color) */
     margin: 0;
     position: relative;
     transition: transform .1s ease-out, box-shadow .1s ease-out;

     /* layered ring look to match your menus */
     box-shadow:
         0 0 0 0.15em var(--surface-0),
         0 0 0 0.30em var(--bg-0),
         0 0 0 0.45em var(--surface-0);
 }

 /* focus ring so it’s accessible */
 .search-trigger:focus-visible {
     outline: none;
     box-shadow: 0 0 0 2px var(--accent-1);
     border-radius: var(--r-0);
 }


 /* inner dot */
 .submenu .list .element input[type="radio"]::before {
     content: "";
     position: absolute;
     inset: 50%;
     inline-size: .75em;
     block-size: .75em;
     border-radius: 50%;
     background: var(--bg-0);
     box-shadow: 0 0 0 1px var(--surface-0);
     transform: translate(-50%, -50%) scale(0);
     transition: transform .1s ease-out, all .1s ease-out;
 }

 /* states */
 .submenu .list .element input[type="radio"]:hover {
     background: color-mix(in oklab, var(--submenu-bg), #fff 8%);
 }

 .submenu .list .element input[type="radio"]:checked::before {
     transform: translate(-50%, -50%) scale(1);
     background: var(--surface-0);
 }

 .submenu .list .element input[type="radio"]:focus-visible {
     outline: 2px dashed var(--ink-1);
     outline-offset: .2em;
 }

 /* optional: disabled look (if you need it later) */
 .submenu .list .element input[type="radio"]:disabled {
     opacity: .5;
     cursor: not-allowed;
 }

 .iconDiv [data-submenu],
 .group [data-submenu] {
     z-index: 1100;
 }

 /* ensure the search group is the positioning context */
 .group {
     position: relative;
 }

 /* take the settings out of flow and park it just left of the search */
 .group>.settings-wrap {
     position: absolute;
     left: 0;
     /* anchor to the search's left edge */
     top: 50%;
     transform: translate(calc(-100% - var(--s-2)), -50%);
     /* float just off the edge */
     z-index: 1100;
     /* above the bar but below modals */
 }

 /* button styling (keep whatever you already had) */
 .settings-dot {
     display: inline-grid;
     place-items: center;
     width: var(--btn-h);
     height: var(--btn-h);
     border: 0;
     border-radius: 9999px;
     background: none;
     color: inherit;
     box-shadow: none;
     cursor: pointer;
 }

 /* submenu stays absolutely positioned; does not affect layout */
 .settings-wrap>[data-submenu] {
     position: absolute;
     top: calc(100% + 8px);
     left: 0;
     min-width: var(--menu-w);
     opacity: 0;
     visibility: hidden;
     pointer-events: none;
     transform: translateY(4px);
     transition: opacity var(--t-fast) var(--ease),
         transform var(--t-fast) var(--ease),
         visibility var(--t-fast) step-end;
 }

 .settings-dot[aria-expanded="true"]+[data-submenu] {
     opacity: 1;
     visibility: visible;
     pointer-events: auto;
     transform: none;
 }

 /* optional: clamp so it never pokes outside viewport on tiny widths */
 @container (max-width: 360px) {
     .group>.settings-wrap {
         transform: translate(-8px, -50%);
     }

     /* keep near edge */
 }

 .group .status-dot {
     position: absolute;
     top: 50%;
     left: 0;
     width: 8px;
     height: 8px;
     border-radius: 50%;
     background: none;
     transform: translate(calc(-10px), -50%);
     /* your current gap + vertical center */
     z-index: 1200;
     pointer-events: none;
     /* purely decorative */
 }

 .group .status-dot svg {
     position: absolute;
     left: 50%;
     top: 50%;
     width: 14px;
     height: 14px;
     /* compose base translate + optional rotation via var */
     transform:
         translate(-80%, -50%) translate(var(--svg-nudge-x, -1px), var(--svg-nudge-y, -1px)) var(--dot-rot, rotate(0deg));
     transform-origin: 50% 50%;
     transform-box: fill-box;
     pointer-events: none;
     transition: transform 600ms cubic-bezier(0.4, 0, 0.2, 1);
 }

 /* keep the settings menu LEFT-aligned (overrides your generic right align) */
 .group .settings-wrap>#menu-settings {
     left: 0;
     right: auto;
     inline-size: max(var(--menu-w), fit-content);
     min-inline-size: var(--menu-w);
     /* optional safety so it never exceeds the viewport */
     max-inline-size: calc(100vw - 16px);
 }

 /* When XS pushes the input left via --xs-overlap, let the dot follow */
 @container (max-width: 400px) {

     .group .settings-hit,
     .group .status-dot {
         transform: translate(calc(-1 * var(--dot-gap) - var(--xs-overlap)), -50%);

     }
 }

 .line {
     fill: none;
     stroke: white;
     stroke-linecap: round;
     stroke-linejoin: round;
     stroke-width: 3;
     /* Define the transition for transforming the Stroke */
     transition: stroke-dasharray 600ms cubic-bezier(0.4, 0, 0.2, 1),
         stroke-dashoffset 600ms cubic-bezier(0.4, 0, 0.2, 1);
 }

 .line-top-bottom {
     stroke-dasharray: 12 63;
 }

 /* Dot menu hit area over the SVG */

 /* Animate the dot SVG when the Settings menu is open. We key off aria-expanded. */
 .group:has(#settings-toggle[aria-expanded="true"]) .status-dot svg,
 .group:has(.settings-hit[aria-expanded="true"]) .status-dot svg {
     --dot-rot: rotate(-45deg);
 }

 .group:has(#settings-toggle[aria-expanded="true"]) .status-dot .line-top-bottom,
 .group:has(.settings-hit[aria-expanded="true"]) .status-dot .line-top-bottom {
     stroke-dasharray: 20 300;
     stroke-dashoffset: -32.42;
 }

 /* ========= Theme Toggle (separate bundle) ========= */
 /* Uses only globals like --accent-1/2, --ink-*, --surface-*, --border-0, and --focus-ring if present. */
 :root {
     /* Tokens (scoped to this component conceptually via prefix) */
     --tt-w: 60px;
     --tt-h: 34px;
     --tt-pad: 4px;
     --tt-knob: 26px;
     --tt-shift: calc(var(--tt-w) - var(--tt-knob) - 2*var(--tt-pad));

     --tt-track-off: var(--accent-2, #2196f3);
     --tt-track-on: #000;

     --tt-knob-off: #ffd84d;
     /* sun */
     --tt-knob-on: #fff;
     /* moon */

     --tt-moon-dot: gray;
     --tt-cloud-light: #eee;
     --tt-cloud-dark: #ccc;
     --tt-ray-fill: #fff;
     --tt-ray-opacity: .10;

     --tt-t: .4s ease;
 }

 /* ===== Switch ===== */
 .tt_switch {
     position: relative;
     display: inline-block;
     width: var(--tt-w);
     height: var(--tt-h);
     line-height: 0;
 }

 .tt_switch input[type="checkbox"] {
     position: absolute;
     inset: 0;
     margin: 0;
     opacity: 0;
     width: 100%;
     height: 100%;
     cursor: pointer;
     z-index: 2;
     /* sits above track to capture focus */
 }

 /* Track */
 .tt_track {
     position: absolute;
     inset: 0;
     background-color: var(--tt-track-off);
     border-radius: var(--tt-h);
     transition: background-color var(--tt-t);
     overflow: hidden;
     z-index: 0;
     cursor: pointer;
 }

 /* Knob (sun/moon) */
 .tt_knob {
     position: absolute;
     left: var(--tt-pad);
     bottom: var(--tt-pad);
     width: var(--tt-knob);
     height: var(--tt-knob);
     border-radius: 50%;
     background-color: var(--tt-knob-off);
     transition: transform var(--tt-t), background-color var(--tt-t);
     z-index: 1;
 }

 /* State */
 .tt_switch input[type="checkbox"]:checked+.tt_track {
     background-color: var(--tt-track-on);
 }

 .tt_switch input[type="checkbox"]:checked+.tt_track .tt_knob {
     transform: translateX(var(--tt-shift));
     background-color: var(--tt-knob-on);
     animation: tt_spin .6s ease-in-out both;
 }

 .tt_switch input[type="checkbox"]:focus-visible+.tt_track {
     box-shadow: var(--focus-ring, 0 0 0 3px color-mix(in oklab, #2196f3, #000 40%));
 }

 /* ===== Decorative elements ===== */
 /* Moon craters */
 .tt_moon-dot {
     position: absolute;
     width: 6px;
     height: 6px;
     background: var(--tt-moon-dot);
     border-radius: 50%;
     opacity: 0;
     transition: opacity var(--tt-t);
 }

 .tt_switch input[type="checkbox"]:checked+.tt_track .tt_knob .tt_moon-dot {
     opacity: 1;
 }

 /* Sun light rays */
 .tt_ray {
     position: absolute;
     fill: var(--tt-ray-fill);
     opacity: var(--tt-ray-opacity);
     z-index: -1;
 }

 /* Clouds */
 .tt_cloud--light,
 .tt_cloud--dark {
     position: absolute;
     fill: var(--tt-cloud-light);
     animation: tt_cloud-move 6s infinite;
 }

 .tt_cloud--dark {
     fill: var(--tt-cloud-dark);
     animation-delay: 1s;
 }

 /* Stars */
 .tt_stars {
     transform: translateY(-32px);
     opacity: 0;
     transition: transform var(--tt-t), opacity var(--tt-t);
 }

 .tt_star {
     position: absolute;
     fill: #fff;
     animation: tt_star-twinkle 2s infinite;
 }

 .tt_switch input[type="checkbox"]:checked+.tt_track .tt_stars {
     transform: translateY(0);
     opacity: 1;
 }

 /* ===== Motion ===== */
 @keyframes tt_cloud-move {
     0% {
         transform: translateX(0);
     }

     40% {
         transform: translateX(4px);
     }

     80% {
         transform: translateX(-4px);
     }

     100% {
         transform: translateX(0);
     }
 }

 @keyframes tt_star-twinkle {

     0%,
     100% {
         opacity: .85;
         transform: scale(1);
     }

     50% {
         opacity: 1;
         transform: scale(1.15);
     }
 }

 /* Use the individual transform property so it won't fight translateX */
 @keyframes tt_spin {
     from {
         rotate: 0deg;
     }

     to {
         rotate: 360deg;
     }
 }

 /* ===== Reduced motion ===== */
 @media (prefers-reduced-motion:reduce) {

     .tt_track,
     .tt_knob,
     .tt_stars,
     .tt_moon-dot {
         transition: none;
     }

     .tt_cloud--light,
     .tt_cloud--dark,
     .tt_star {
         animation: none;
     }
 }

 /* ===== Per-element positioning (scoped) ===== */
 /* Moon craters (on the knob) */
 .tt_switch #moon-dot-1 {
     left: 10px;
     top: 3px;
     width: 6px;
     height: 6px;
     z-index: 4;
 }

 .tt_switch #moon-dot-2 {
     left: 2px;
     top: 10px;
     width: 10px;
     height: 10px;
     z-index: 4;
 }

 .tt_switch #moon-dot-3 {
     left: 16px;
     top: 18px;
     width: 3px;
     height: 3px;
     z-index: 4;
 }

 /* Rays (behind knob) */
 .tt_switch #light-ray-1 {
     left: -8px;
     top: -8px;
     width: 43px;
     height: 43px;
     z-index: -1;
 }

 .tt_switch #light-ray-2 {
     left: -50%;
     top: -50%;
     width: 55px;
     height: 55px;
     z-index: -1;
 }

 .tt_switch #light-ray-3 {
     left: -18px;
     top: -18px;
     width: 60px;
     height: 60px;
     z-index: -1;
 }

 /* Clouds */
 .tt_switch #cloud-1 {
     left: 30px;
     top: 15px;
     width: 40px;
 }

 .tt_switch #cloud-2 {
     left: 44px;
     top: 10px;
     width: 20px;
 }

 .tt_switch #cloud-3 {
     left: 18px;
     top: 24px;
     width: 30px;
 }

 .tt_switch #cloud-4 {
     left: 36px;
     top: 18px;
     width: 40px;
 }

 .tt_switch #cloud-5 {
     left: 48px;
     top: 14px;
     width: 20px;
 }

 .tt_switch #cloud-6 {
     left: 22px;
     top: 26px;
     width: 30px;
 }

 /* Stars */
 .tt_switch #star-1 {
     width: 20px;
     top: 2px;
     left: 3px;
     animation-delay: .3s;
 }

 .tt_switch #star-2 {
     width: 6px;
     top: 16px;
     left: 3px;
 }

 .tt_switch #star-3 {
     width: 12px;
     top: 20px;
     left: 10px;
     animation-delay: .6s;
 }

 .tt_switch #star-4 {
     width: 18px;
     top: 0;
     left: 18px;
     animation-delay: 1.3s;
 }

 /* Make the hot-key editor always sit above the menus */
 .hb-shell {
     position: fixed;
     inset: 0;
     z-index: 4000;
 }

 .hb-shell .backdrop {
     position: fixed;
     inset: 0;
     z-index: 4001;
 }

 .hb-shell .panel {
     position: relative;
     z-index: 4002;
 }

 .hb-shell .hb-actions {
     position: absolute;
     top: .5rem;
     right: .5rem;
     z-index: 4003;
 }

 /* ========= Tokens ========= */
 :root {
     /* Switch */
     --c-primary: var(--accent-2);
     /* track (default) */
     --c-primary-ink: var(--accent-1);
     /* track (checked) */
     --c-knob: #e8e8e8;
     --c-border: var(--border-0);

     /* Surfaces */
     --c-table-head: color-mix(in oklab, var(--surface-1), #fff 8%);

     /* Badges */
     --c-badge-on-bg: color-mix(in oklab, var(--accent-2), #fff 85%);
     --c-badge-off-bg: color-mix(in oklab, var(--surface-1), #fff 88%);

     /* Tooltip */
     --c-tooltip-bg: var(--surface-1);
     --c-tooltip-fg: var(--ink-1);

     /* Focus ring */
     --focus-ring: 0 0 0 3px color-mix(in oklab, var(--accent-1), #000 40%);

     /* Tooltip sizing */
     --tip-font-size: 14px;
     --tip-pad-y: 8px;
     --tip-pad-x: 12px;
     --tip-radius: 6px;
     --tip-arrow: 8px;
 }

 /* ===== Switch ===== */
 .st_switch {
     position: relative;
     display: inline-block;
     width: 64px;
     height: 34px;
     font-size: 17px;
     line-height: 0;
 }

 .st_input {
     position: absolute;
     inset: 0;
     margin: 0;
     opacity: 0;
     cursor: pointer;
 }

 .st_slider {
     position: absolute;
     inset: 0;
     border-radius: 30px;
     background-color: var(--c-primary);
     transition: background-color .3s ease;
     pointer-events: none;
 }

 .st_slider::before {
     content: "";
     position: absolute;
     left: 2px;
     bottom: 2px;
     width: 30px;
     height: 30px;
     border-radius: 20px;
     background-color: var(--c-knob);
     transition: transform .3s ease;
 }

 .On,
 .Off {
     position: absolute;
     top: 5px;
     width: 24px;
     height: 24px;
     display: grid;
     place-items: center;
     pointer-events: none;
     transition: opacity .2s ease;
 }

 .On {
     left: 36px;
     opacity: 1;
 }

 .Off {
     left: 5px;
     opacity: 0;
 }

 .Off svg {
     fill: var(--c-primary);
 }

 .st_switch:hover .Off svg {
     animation: rotate 15s linear infinite;
 }

 .st_switch:hover .On svg {
     animation: tilt 5s linear infinite;
 }

 @keyframes rotate {
     from {
         transform: rotate(0)
     }

     to {
         transform: rotate(360deg)
     }
 }

 @keyframes tilt {
     0% {
         transform: rotate(0)
     }

     25% {
         transform: rotate(-10deg)
     }

     75% {
         transform: rotate(10deg)
     }

     100% {
         transform: rotate(0)
     }
 }

 .st_input:checked~.st_slider {
     background-color: var(--c-primary-ink);
 }

 .st_input:checked~.st_slider::before {
     transform: translateX(30px);
 }

 .st_input:checked~.On {
     opacity: 0;
 }

 .st_input:checked~.Off {
     opacity: 1;
 }

 .st_input:focus-visible~.st_slider {
     box-shadow: var(--focus-ring);
 }

 @media (prefers-reduced-motion:reduce) {

     .st_slider,
     .st_slider::before,
     .On,
     .Off {
         transition: none;
     }

     .st_switch:hover .Off svg,
     .st_switch:hover .On svg {
         animation: none;
     }
 }

 /* ===== Tooltip ===== */
 .data-tooltip {
     position: relative;
 }

 .data-tooltip::before,
 .data-tooltip::after {
     position: absolute;
     left: 50%;
     visibility: hidden;
     opacity: 0;
     transform: translate(-50%, 5px);
     transition: all .2s ease;
     pointer-events: none;
 }

 .data-tooltip::before {
     content: attr(data-tooltip-content);
     bottom: calc(100% + 8px);
     background-color: var(--c-tooltip-bg);
     color: var(--c-tooltip-fg);
     font-size: var(--tip-font-size);
     font-weight: 600;
     padding: var(--tip-pad-y) var(--tip-pad-x);
     border-radius: var(--tip-radius);
     white-space: nowrap;
     display: inline-block;
     min-width: max-content;
 }

 .data-tooltip::after {
     content: "";
     bottom: calc(100% + 2px);
     border-top: var(--tip-arrow) solid var(--c-tooltip-bg);
     border-left: var(--tip-arrow) solid transparent;
     border-right: var(--tip-arrow) solid transparent;
 }

 .data-tooltip:hover::before,
 .data-tooltip:hover::after,
 .data-tooltip:focus-within::before,
 .data-tooltip:focus-within::after {
     visibility: visible;
     opacity: 1;
     transform: translate(-50%, 0);
 }

 /* Only show tooltip on hover or when a descendant is focus-visible (keyboard) */
 @supports selector(:has(*)) {

     .data-tooltip:hover::before,
     .data-tooltip:hover::after,
     .data-tooltip:has(:focus-visible)::before,
     .data-tooltip:has(:focus-visible)::after {
         visibility: visible;
         opacity: 1;
         transform: translate(-50%, 0);
     }

     /* Cancel the old focus-within behavior to prevent sticky on mouse click */
     .data-tooltip:focus-within::before,
     .data-tooltip:focus-within::after {
         visibility: hidden;
         opacity: 0;
         transform: translate(-50%, 5px);
     }
 }

 #menu-settings .data-tooltip[data-tip-suspend]::before,
 #menu-settings .data-tooltip[data-tip-suspend]::after {
     visibility: hidden !important;
     opacity: 0 !important;
     transform: translate(-50%, 5px) !important;
 }

 /* ===== Demo layout / table ===== */
 .st_group {
     display: grid;
     grid-template-columns: repeat(auto-fit, minmax(160px, max-content));
     gap: 14px;
     width: max-content;
 }

 .st_item {
     display: flex;
     align-items: center;
     gap: 10px;
 }

 .st_name {
     font: 600 14px/1.2 "Inter", system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
 }

 .st_table {
     margin-top: 18px;
     border-collapse: collapse;
     font: 500 14px/1.3 "Inter", system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
     min-width: 260px;
 }

 .st_table th,
 .st_table td {
     border: 1px solid var(--c-border);
     padding: 6px 10px;
     text-align: left;
 }

 .st_table th {
     background: var(--c-table-head);
     font-weight: 600;
 }

 .badge {
     display: inline-block;
     min-width: 42px;
     padding: 2px 8px;
     border-radius: 999px;
     text-align: center;
     font: 600 12px/1 "Inter", system-ui;
 }

 .badge.on {
     background: var(--c-badge-on-bg);
 }

 .badge.off {
     background: var(--c-badge-off-bg);
 }

 /* ===== Settings panel (scoped) ===== */
 .group .settings-wrap>#menu-settings {
     left: 0;
     right: auto;
     inline-size: max(var(--menu-w), fit-content);
     min-inline-size: var(--menu-w);
     max-inline-size: calc(100vw - 16px);
     background: var(--surface-1);
     border: 1px solid var(--border-0);
     color: var(--text-0);
 }

 :root[data-theme="dark"] .group .settings-wrap>#menu-settings {
     background: var(--surface-0);
     color: var(--ink-1);
 }

 /* Compact 2-col switch grid inside settings */
 #menu-settings #st_group {
     display: grid;
     grid-template-columns: repeat(2, 64px);
     /* 2 x switch width */
     grid-auto-rows: 34px;
     /* switch height */
     grid-auto-flow: row;
     column-gap: 8px;
     row-gap: 10px;
     justify-content: start;
     width: fit-content;
 }

 #menu-settings #st_group .st_item {
     gap: 0;
 }


 /* Make the theme toggle exactly one grid cell in settings */
 #menu-settings .tt_switch {
     --tt-w: 64px;
     --tt-h: 34px;
 }

 /* Let the grid back-fill any gaps */
 #menu-settings #st_group {
     grid-auto-flow: row dense;
 }

 /* No stray margins */
 #menu-settings .st_item,
 #menu-settings .tt_switch {
     margin: 0;
 }

 /* ---- Extra toggle custom checkboxes (scoped) ---- */
#menu-settings #extra-toggle-col .extra-toggle{
  position: relative;
  display: inline-flex;
  align-items: center;
  color: var(--ink-1, #333);
}

/* Visually hide native checkbox but keep it focusable/a11y */
#menu-settings #extra-toggle-col .extra-toggle input[type="checkbox"]{
  appearance: none;               /* extra safety */
  position: absolute;
  width: 1px; height: 1px;
  margin: -1px; padding: 0; border: 0;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  white-space: nowrap;
}

/* The square box */
#menu-settings #extra-toggle-col .custom-checkbox{
  display: inline-block;
  width: 20px;                   /* use physical props for max compat */
  height: 20px;
  box-sizing: border-box;
  border: 2px solid currentColor;
  border-radius: 4px;
  background: transparent;
  position: relative;
  cursor: pointer;
  vertical-align: middle;
  line-height: 0;
}

/* The inner check (filled square) */
#menu-settings #extra-toggle-col .custom-checkbox::after{
  content: "";
  position: absolute;
  width: 10px; height: 10px;     /* physical props */
  top: 50%; left: 50%;
  transform: translate(-50%, -50%);
  background-color: currentColor;
  border-radius: 2px;
  opacity: 0;
  transition: opacity .15s ease;
}

/* Show when checked */
#menu-settings #extra-toggle-col .extra-toggle input[type="checkbox"]:checked + .custom-checkbox::after{
  opacity: 1;
}

/* Keyboard focus ring */
#menu-settings #extra-toggle-col .extra-toggle input[type="checkbox"]:focus-visible + .custom-checkbox{
  outline: none;
  box-shadow: 0 0 0 3px color-mix(in oklab, currentColor, #000 70%);
}

/* keep the column spacing tidy */
#menu-settings #extra-toggle-col{ gap: 8px; }

/* Tooltip cool-down support */
#menu-settings .data-tooltip[data-tip-suspend]::before,
#menu-settings .data-tooltip[data-tip-suspend]::after{
  visibility:hidden !important; opacity:0 !important; transform:translate(-50%,5px) !important;
}

/* Corner button MUST be absolute inside the panel */
#menu-settings #grid-corner-btn{
  position:absolute;
  z-index:2;
  width:20px; height:20px;
  display:inline-flex; align-items:center; justify-content:center;
  border:1.5px solid currentColor; border-radius:4px; background:transparent; padding:0; cursor:pointer;
}
#menu-settings #grid-corner-btn:focus-visible{
  outline:none; box-shadow:0 0 0 3px color-mix(in oklab,currentColor,#000 70%);
}

/* Quick knobs (defaults) for the corner button */
#menu-settings{
  --corner-btn-size: 40px;   /* width/height */
  --corner-btn-nudge-x: 35px; /* +right / -left */
  --corner-btn-nudge-y: -23px; /* +down  / -up  */
}

#menu-settings #grid-corner-btn{
  position: absolute;
  z-index: 2;
  width: var(--corner-btn-size);
  height: var(--corner-btn-size);
  display: inline-flex; align-items: center; justify-content: center;
  border: 1.5px solid currentColor; border-radius: 4px;
  background: transparent; padding: 0; cursor: pointer;
  /* nudge happens after JS computes the cell center */
  transform: translate(var(--corner-btn-nudge-x), var(--corner-btn-nudge-y));
}
#menu-settings #grid-corner-btn:focus-visible{
  outline: none; box-shadow: 0 0 0 3px color-mix(in oklab, currentColor, #000 70%);
}

/* icon inside the corner button */
#menu-settings #grid-corner-btn .corner-ico{
  width: 60%;
  height: 60%;
  display: block;
}
#menu-settings #grid-corner-btn .corner-ico *[stroke]{ stroke: currentColor; }
#menu-settings #grid-corner-btn .corner-ico *[fill]:not([fill="none"]){ fill: currentColor; }

/* make hidden really hide, even if .iconDiv has display:... !important */
[hidden],
.iconDiv[hidden] { display: none !important; }

/* optional: hide the divider that follows a hidden icon */
.iconDiv[hidden] + .divider { display: none !important; }

html, body { height: 100%; }
body { margin: 0; }                 /* removes the white strip */
:root[data-sexy="on"] .container {
  min-height: 100vh;                /* fills viewport */
  position: relative;               /* anchor ::after */
  isolation: isolate;               /* keeps ::after behind content without leaking z-index */
}

/* Sexy Mode OFF => enable the rain background */
/* ========== Sexy ON + Dark: viewport-wide rain (fills the padded strip) ========== */
:root[data-sexy="on"][data-theme="dark"] body {
  background: #000;           /* base behind the gradients */
  position: relative;         /* anchor pseudos */
  overflow-x: hidden;
}

/* stop rendering rain on .container (avoid double paint) */
:root[data-sexy="on"][data-theme="dark"] .container {
  background: transparent !important;
  animation: none !important;
  position: relative;
  z-index: 1;                 /* keep content above body pseudos */
}
:root[data-sexy="on"][data-theme="dark"] .container::after {
  content: none !important;
}

/* Rain pattern: full-viewport on body::before */
:root[data-sexy="on"][data-theme="dark"] body::before {
  content: "";
  position: fixed;
  inset: 0;
  z-index: 0;                 /* under the UI; header stays above */
  pointer-events: none;

  /* your original pattern */
  --c: #09f;
  background-color: #000;
  background-image:
    radial-gradient(4px 100px at 0px 235px, var(--c), #0000),
    radial-gradient(4px 100px at 300px 235px, var(--c), #0000),
    radial-gradient(1.5px 1.5px at 150px 117.5px, var(--c) 100%, #0000 150%),
    radial-gradient(4px 100px at 0px 252px, var(--c), #0000),
    radial-gradient(4px 100px at 300px 252px, var(--c), #0000),
    radial-gradient(1.5px 1.5px at 150px 126px, var(--c) 100%, #0000 150%),
    radial-gradient(4px 100px at 0px 150px, var(--c), #0000),
    radial-gradient(4px 100px at 300px 150px, var(--c), #0000),
    radial-gradient(1.5px 1.5px at 150px 75px, var(--c) 100%, #0000 150%),
    radial-gradient(4px 100px at 0px 253px, var(--c), #0000),
    radial-gradient(4px 100px at 300px 253px, var(--c), #0000),
    radial-gradient(1.5px 1.5px at 150px 126.5px, var(--c) 100%, #0000 150%),
    radial-gradient(4px 100px at 0px 204px, var(--c), #0000),
    radial-gradient(4px 100px at 300px 204px, var(--c), #0000),
    radial-gradient(1.5px 1.5px at 150px 102px, var(--c) 100%, #0000 150%),
    radial-gradient(4px 100px at 0px 134px, var(--c), #0000),
    radial-gradient(4px 100px at 300px 134px, var(--c), #0000),
    radial-gradient(1.5px 1.5px at 150px 67px, var(--c) 100%, #0000 150%),
    radial-gradient(4px 100px at 0px 179px, var(--c), #0000),
    radial-gradient(4px 100px at 300px 179px, var(--c), #0000),
    radial-gradient(1.5px 1.5px at 150px 89.5px, var(--c) 100%, #0000 150%),
    radial-gradient(4px 100px at 0px 299px, var(--c), #0000),
    radial-gradient(4px 100px at 300px 299px, var(--c), #0000),
    radial-gradient(1.5px 1.5px at 150px 149.5px, var(--c) 100%, #0000 150%),
    radial-gradient(4px 100px at 0px 215px, var(--c), #0000),
    radial-gradient(4px 100px at 300px 215px, var(--c), #0000),
    radial-gradient(1.5px 1.5px at 150px 107.5px, var(--c) 100%, #0000 150%),
    radial-gradient(4px 100px at 0px 281px, var(--c), #0000),
    radial-gradient(4px 100px at 300px 281px, var(--c), #0000),
    radial-gradient(1.5px 1.5px at 150px 140.5px, var(--c) 100%, #0000 150%),
    radial-gradient(4px 100px at 0px 158px, var(--c), #0000),
    radial-gradient(4px 100px at 300px 158px, var(--c), #0000),
    radial-gradient(1.5px 1.5px at 150px 79px, var(--c) 100%, #0000 150%),
    radial-gradient(4px 100px at 0px 210px, var(--c), #0000),
    radial-gradient(4px 100px at 300px 210px, var(--c), #0000),
    radial-gradient(1.5px 1.5px at 150px 105px, var(--c) 100%, #0000 150%);
  background-size:
    300px 235px,300px 235px,300px 235px,
    300px 252px,300px 252px,300px 252px,
    300px 150px,300px 150px,300px 150px,
    300px 253px,300px 253px,300px 253px,
    300px 204px,300px 204px,300px 204px,
    300px 134px,300px 134px,300px 134px,
    300px 179px,300px 179px,300px 179px,
    300px 299px,300px 299px,300px 299px,
    300px 215px,300px 215px,300px 215px,
    300px 281px,300px 281px,300px 281px,
    300px 158px,300px 158px,300px 158px,
    300px 210px,300px 210px,300px 210px;
  animation: hi 150s linear infinite;
}

/* Shimmering dot grid + backdrop filter: full-viewport on body::after */
:root[data-sexy="on"][data-theme="dark"] body::after {
  content: "";
  position: fixed;
  inset: 0;
  z-index: 0;
  pointer-events: none;
  background-image: radial-gradient(circle at 50% 50%, #0000 0, #0000 2px, hsl(0 0% 4%) 2px);
  background-size: 8px 8px;
  --f: blur(1em) brightness(6);
  animation: hii 10s linear infinite;
  backdrop-filter: var(--f) hue-rotate(0deg);
}


@keyframes hi {
  0% {
    background-position:
      0px 220px,3px 220px,151.5px 337.5px,25px 24px,28px 24px,176.5px 150px,
      50px 16px,53px 16px,201.5px 91px,75px 224px,78px 224px,226.5px 350.5px,
      100px 19px,103px 19px,251.5px 121px,125px 120px,128px 120px,276.5px 187px,
      150px 31px,153px 31px,301.5px 120.5px,175px 235px,178px 235px,326.5px 384.5px,
      200px 121px,203px 121px,351.5px 228.5px,225px 224px,228px 224px,376.5px 364.5px,
      250px 26px,253px 26px,401.5px 105px,275px 75px,278px 75px,426.5px 180px;
  }
  100% {
    background-position:
      0px 6800px,3px 6800px,151.5px 6917.5px,25px 13632px,28px 13632px,176.5px 13758px,
      50px 5416px,53px 5416px,201.5px 5491px,75px 17175px,78px 17175px,226.5px 17301.5px,
      100px 5119px,103px 5119px,251.5px 5221px,125px 8428px,128px 8428px,276.5px 8495px,
      150px 9876px,153px 9876px,301.5px 9965.5px,175px 13391px,178px 13391px,326.5px 13540.5px,
      200px 14741px,203px 14741px,351.5px 14848.5px,225px 18770px,228px 18770px,376.5px 18910.5px,
      250px 5082px,253px 5082px,401.5px 5161px,275px 6375px,278px 6375px,426.5px 6480px;
  }
}
@keyframes hii {
  0%   { backdrop-filter: var(--f) hue-rotate(0deg); }
  100% { backdrop-filter: var(--f) hue-rotate(360deg); }
}

/* ===== Light theme: pastel background (applies whether sexy is on or off) ===== */
:root[data-sexy="on"][data-theme="light"] body {
         /* covers the padded gap under the fixed header */
  background: linear-gradient(135deg, #ffe8f3, #d9f3ff);
  position: relative;          /* was 'position:hidden' (invalid) */
  overflow-x: hidden;
}

/* Keep your container layout; add the soft vignette + swirl */
:root[data-sexy="on"][data-theme="light"] .container {
  position: relative;       /* anchor pseudo elements */
  overflow: hidden;
  /* subtle inner vignette similar to your sample */
  background: radial-gradient(
    circle,
    rgba(255, 255, 255, 0.2),
    rgba(0, 0, 0, 0.1)
  );
}

/* Swirling conic layers (only in light theme) */
:root[data-sexy="on"][data-theme="light"] .container::before,
:root[data-sexy="on"][data-theme="light"] .container::after {
  content: "";
  position: fixed;
  z-index: 0;                  /* below the UI; header has z-index:1000 */
  top: 50%;
  left: 50%;
  width: 240vmax;
  height: 240vmax;
  transform: translate(-50%, -50%);
   background: conic-gradient(
    from 0deg,
    #ff9aa2,
    /* Soft pink */ #ffb7b2,
    /* Light peach */ #ffdac1,
    /* Pastel yellow */ #e2f0cb,
    /* Mint green */ #a2e4ff,
    /* Baby blue */ #c9afff,
    /* Lavender */ #ffb7b2,
    #ff9aa2
  );
  filter: blur(100px);
  opacity: 0.75;
  pointer-events: none;
  animation: pastel-rotate 8s linear infinite;
}

/* secondary layer for depth */
:root[data-sexy="on"][data-theme="light"] body::after {
  width: 200vmax;
  height: 200vmax;
  opacity: 0.55;
  animation: pastel-rotate-reverse 10s linear infinite;
}

/* keep content above the swirl */
:root[data-sexy="on"][data-theme="light"] .container { position: relative; z-index: 1; }

/* keyframes (scoped names) */
@keyframes pastel-rotate {
  from { transform: translate(-50%, -50%) rotate(0deg); }
  to   { transform: translate(-50%, -50%) rotate(360deg); }
}
@keyframes pastel-rotate-reverse {
  from { transform: translate(-50%, -50%) rotate(0deg); }
  to   { transform: translate(-50%, -50%) rotate(-360deg); }
}